org 0x7c00
jmp 0x0000:start

data:
	bandeira db 2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,14,14,14,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,14,14,14,14,14,14,14,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,14,14,14,1,1,1,14,14,14,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,14,14,14,14,1,1,1,1,1,14,14,14,14,2,2,2,2,2,2,2,2,2,2,2,2,2,2,14,14,14,14,14,1,1,1,1,1,1,1,14,14,14,14,14,2,2,2,2,2,2,2,2,2,2,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,2,2,2,2,2,2,2,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,2,14,14,14,14,14,14,14,2,2,2,2,2,2,2,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,2,2,2,2,2,2,2,2,2,2,14,14,14,14,14,1,1,1,1,1,1,1,14,14,14,14,14,2,2,2,2,2,2,2,2,2,2,2,2,2,2,14,14,14,14,1,1,1,1,1,14,14,14,14,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,14,14,14,1,1,1,14,14,14,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,14,14,14,14,14,14,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,14,14,14,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2


intela:                               ; Função que incia o modo vga e printa uma tela preta pra carregar as cores
    mov ah, 0
    mov al, 12h
    int 10h
    mov ah, 0xb
    mov al, 13h
    int 10h
    mov ah, 0xb
    mov bh, 0
    mov bl, 0
    int 10h
    ret

writePixel:
	mov ah, 0ch
	int 10h
	ret

drawImg: ;antes de usar, precisamos dizer quem s1 vai pegar
	mov dx, 200
	.for1: 
		cmp dl, 214
		je .endfor1
		mov cx, 200
		.for2:
			cmp cl, 229
			je .endfor2
			lodsb
			call writePixel
			inc cx
			jmp .for2
		.endfor2:
		inc dx
		jmp .for1
	.endfor1:
	ret


start:
    xor ax, ax
    mov ds, ax
    mov es, ax
    call intela
    mov si, bandeira
    call drawImg
    
    jmp $


times 510 - ($ - $$) db 0
dw 0xaa55
